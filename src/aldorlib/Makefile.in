# (Patch) Subject: Re: aldor/axiom interoperability
# http://article.gmane.org/gmane.comp.mathematics.axiom.devel/19315/match=broadbery

subdir=src/aldorlib/
srcdir=@srcdir@
VPATH=@srcdir@
MAKEFLAGS += -Wwarn-undefined-variables
ALDOR=@ALDOR@

lang := lang init_Generator
environment := System init_XLisp XLisp
attributes := unitsKnown noZeroDivisors CommutativeStar	\
	      canonicalUnitNormal finiteAggregate shallowlyMutable

basics := PositiveInteger CoercibleTo RepeatedDoubling SetCategory	\
	   init_SingleInteger init_OutputForm OutputForm init_String	\
	   BasicType init_Boolean String Integer NonNegativeInteger	\
	   RepeatedSquaring init_NonNegativeInteger			\
	   init_PositiveInteger AbelianGroup				\
	   CancellationAbelianMonoid AbelianMonoid AbelianSemiGroup	\
	   Ring Rng SemiRng SemiGroup SemiRing Monoid LeftModule	\
	   Partial Boolean RightModule BiModule Module			\
	   CommutativeRing EntireRing Algebra 

orders := PartialOrder OrderedSet Comparable OrderedAbelianGroup	\
	  OrderedAbelianMonoid OrderedAbelianSemiGroup			\
	  OrderedCancellationAbelianMonoid OrderedIntegralDomain	\
	  OrderedRing 

datatypes := init_List Aggregate HomogeneousAggregate List Fold

equations := Evalable InnerEvalable Equation init_Equation

domains := PrincipalIdealDomain0 GcdDomain0 IntegralDomain

library := $(lang) $(attributes)  $(environment)  $(basics) $(datatypes) $(orders) $(domains) $(equations)

lang_deps :=
init_Generator_deps := lang

System_deps := lang String init_Boolean
XLisp_deps := lang init_Boolean init_XLisp
init_XLisp_deps := lang

init_List_deps := BasicType
List_deps := init_List XLisp init_Generator NonNegativeInteger SetCategory

RngTest_deps := lang init_Boolean Integer AbelianSemiGroup AbelianMonoid CancellationAbelianMonoid 
Boolean_deps := init_Boolean BasicType XLisp
Partial_deps := BasicType Boolean
SetCategory_deps := BasicType CoercibleTo init_OutputForm String init_SingleInteger
SemiGroup_deps := SetCategory PositiveInteger RepeatedSquaring
AbelianSemiGroup_deps := SetCategory  init_PositiveInteger RepeatedDoubling
SemiRng_deps := AbelianSemiGroup SemiGroup
SemiRing_deps := SemiRng AbelianMonoid Monoid
Monoid_deps := SemiGroup NonNegativeInteger Partial
AbelianMonoid_deps := AbelianSemiGroup NonNegativeInteger PositiveInteger
CancellationAbelianMonoid_deps := AbelianMonoid Partial
AbelianGroup_deps := CancellationAbelianMonoid 
Rng_deps := AbelianGroup NonNegativeInteger

IntegralDomain_deps := EntireRing canonicalUnitNormal Algebra
GcdDomain0_deps := IntegralDomain List System
PrincipalIdealDomain0_deps := GcdDomain0 init_List Partial

Comparable_deps := SetCategory
PartialOrder_deps := init_Boolean
OrderedSet_deps := Comparable PartialOrder 
OrderedAbelianGroup_deps := OrderedCancellationAbelianMonoid AbelianGroup
OrderedAbelianMonoid_deps := OrderedAbelianSemiGroup AbelianMonoid
OrderedAbelianSemiGroup_deps := OrderedSet AbelianSemiGroup
OrderedCancellationAbelianMonoid_deps := OrderedAbelianMonoid CancellationAbelianMonoid
OrderedRing_deps := OrderedAbelianGroup Ring System
OrderedIntegralDomain_deps := OrderedRing IntegralDomain

CommutativeRing_deps := Ring CommutativeStar BiModule
EntireRing_deps := BiModule Ring noZeroDivisors

LeftModule_deps := SemiRng AbelianSemiGroup AbelianMonoid AbelianGroup
RightModule_deps := SemiRng AbelianSemiGroup AbelianMonoid AbelianGroup
BiModule_deps := LeftModule RightModule 
Module_deps := BiModule CommutativeRing

Ring_deps := Rng SemiRing LeftModule unitsKnown NonNegativeInteger Integer
Algebra_deps := CommutativeRing Module
RepeatedDoubling_deps := lang SetCategory PositiveInteger SetCategory Integer
RepeatedSquaring_deps := lang SetCategory PositiveInteger SetCategory Integer
CoercibleTo_deps := lang
String_deps := init_String
init_OutputForm_deps := lang
init_SingleInteger_deps := lang init_XLisp
init_String_deps := lang
init_Boolean_deps := lang
init_NonNegativeInteger_deps := lang
init_PositiveInteger_deps := lang
BasicType_deps := lang init_Boolean
PositiveInteger_deps := Integer NonNegativeInteger
NonNegativeInteger_deps := Integer
Integer_deps := lang init_Boolean init_NonNegativeInteger init_PositiveInteger
OutputForm_deps := init_OutputForm init_List

Fold_deps := List
Aggregate_deps := NonNegativeInteger finiteAggregate XLisp
HomogeneousAggregate_deps := Aggregate CoercibleTo OutputForm	\
			     SetCategory shallowlyMutable Evalable Boolean Fold

init_Equation_deps := SetCategory
Equation_deps := init_Equation
Evalable_deps := InnerEvalable Equation
InnerEvalable_deps := SetCategory List

unitsKnown_deps := lang
noZeroDivisors_deps := lang
CommutativeStar_deps := lang
canonicalUnitNormal_deps := lang
finiteAggregate_deps := lang
shallowlyMutable_deps := lang

default: compile_fmfiles

aofiles := $(patsubst %,%.ao,$(library))
fmfiles := $(patsubst %,%.fm,$(library))

compile_aofiles: $(aofiles) 
compile_fmfiles: $(fmfiles) 

$(aofiles): %.ao: $(srcdir)/%.as %.dep
	rm -f libaxiom_$*.al
	for i in $$(cat $*.dep); \
	do \
		ar r libaxiom_$*.al $$i.ao; \
	done
	$(ALDOR) -I$(srcdir) -Y. -lAxiom=axiom_$* $(opts_$*) -fao=$@ -O $(srcdir)/$*.as

$(fmfiles): %.fm: %.ao
	$(ALDOR) -ffm=$@ $*.ao

define dep_template
$(1).ao: $(1).dep $$(patsubst %,%.ao,$$($(1)_deps))
$(1).dep: $$(patsubst %,%.dep,$$($(1)_deps))
endef

$(patsubst %, %.dep,$(library) ): Makefile

$(patsubst %, %.dep,$(library) ): 
	echo > $@
	set -x
	for i in $(filter %.dep, $^); \
	do d=$$(basename $$i .dep); \
	   for j in $$(cat $$i); do grep "^$$j$$" $@ || echo $$j >> $@; done; \
	echo $(basename $$d .dep)>> $@;  \
	done
	cat $@ | awk '{print "item", $$0}'

$(foreach l,$(library), $(eval $(call dep_template,$(l))))
