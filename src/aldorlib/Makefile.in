# (Patch) Subject: Re: aldor/axiom interoperability
# http://article.gmane.org/gmane.comp.mathematics.axiom.devel/19315/match=broadbery

subdir=src/aldorlib/
srcdir=@srcdir@
VPATH=@srcdir@
MAKEFLAGS += -Wwarn-undefined-variables
ALDOR=@ALDOR@

scripts := build-dep show gloop
testscripts := test-build-dep

lang := lang init_Generator Void Tuple Basic 
environment := System init_XLisp XLisp

attributes := unitsKnown noZeroDivisors CommutativeStar			\
	      canonicalUnitNormal finiteAggregate shallowlyMutable	\
	      CharacteristicNonZero CharacteristicZero Approximate	\
	      additiveValuation

integers := init_NonNegativeInteger init_PositiveInteger		\
	    init_SingleInteger PositiveInteger Integer			\
	    NonNegativeInteger Integer_SetCategory			\
	    Integer_OrderedRing Integer_IntegralDomain IntegerMod	\
	    SingleInteger NonNegativeInteger_OrderedAbelianMonoidSup 

basics := CoercibleTo FullyRetractableTo RetractableTo ConvertibleTo	\
          SetCategory init_String BasicType OrderedFinite		\
          init_Boolean String init_InputForm RepeatedDoubling		\
          RepeatedSquaring init_Symbol Symbol Symbol_SetCategory	\
          init_Character Character_Base Logic Character			\
          String_SetCategory

outputs := init_OutputForm OutputForm NumberFormats	\
	   OutputFormLisp

maths := AbelianGroup CancellationAbelianMonoid AbelianMonoid		\
         AbelianSemiGroup Group Ring Rng SemiRng SemiGroup SemiRing	\
         Monoid LeftModule Partial Boolean RightModule BiModule		\
         Module CommutativeRing EntireRing Algebra DifferentialRing	\
         DifferentialExtension PartialDifferentialRing Field0		\
         StepThrough Finite FullyLinearlyExplicitRingOver		\
         LinearlyExplicitRingOver 

domains := PrincipalIdealDomain0 PrincipalIdealDomain GcdDomain0	\
           GcdDomain IntegralDomain EuclideanDomain0 EuclideanDomain	\
           IdealElt

floats := init_DoubleFloat init_Float DoubleFloat_SetCategory

_sexprs := init_SExpression SExpressionCategory SExpressionOf SExpression
sexprs  := $(patsubst %, sexpr/%, $(_sexprs))

fractions := Localize init_Fraction DivisionRing LocalAlgebra	\
	     Fraction_CommutativeRing Fraction_DivisionRing

factoreds := init_Factored

randoms := RandomNumberGenerator RandomNumberSource

poly := PolynomialRing FiniteAbelianMonoidRing AbelianMonoidRing	\
	SingletonAsOrderedSet FreeModule AbelianProductCategory		\
	IndexedDirectProductCategory IndexedDirectProductObject		\
	FreeModuleCategory UnivariatePolynomialCategory0		\
	SparseUnivariatePolynomial_FiniteAbelianMonoidRing		\
	PolynomialCategory0 init_SparseUnivariatePolynomial		\
	SparseUnivariatePolynomial_UnivariatePolynomialCategory0	\
	PseudoRemainderSequence UnivariatePolynomialCategory		\
	PolynomialCategory SparseUnivariatePolynomial_R			\
	SparseUnivariatePolynomial_UnivariatePolynomialCategory

orders := PartialOrder OrderedSet Comparable OrderedAbelianGroup	\
	  OrderedAbelianMonoid OrderedAbelianSemiGroup			\
	  OrderedCancellationAbelianMonoid OrderedIntegralDomain	\
	  OrderedRing OrderedAbelianMonoidSup

datatypes := init_List Aggregate HomogeneousAggregate List Fold		\
	     RecursiveAggregate UnaryRecursiveAggregate			\
	     LinearAggregate StreamAggregate Collection			\
	     IndexedAggregate EltableAggregate Eltable			\
	     List_StreamAggregate FiniteLinearAggregate			\
	     FiniteLinearAggregateSort IndexedOneDimensionalArray	\
	     ExtensibleLinearAggregate List_ExtensibleLinearAggregate	\
	     BitAggregate IndexedBits

segments := init_UniversalSegment init_Segment SegmentCategory	\
	    SegmentExpansionCategory UniversalSegment		\
	    Segment_SegmentCategory Segment

equations := Evalable InnerEvalable Equation_SetCategory	\
	     init_Equation

trig := RadicalCategory

arrays := init_PrimitiveArray PrimitiveArray_Base PrimitiveArray	\
	  InnerIndexedTwoDimensionalArray				\
	  OneDimensionalArrayAggregate TwoDimensionalArrayCategory \

linalg := init_Vector init_Matrix Matrix_TwoDimensionalArrayCategory	\
	   Vector_FiniteLinearAggregate VectorCategory			\
	   IndexedVector_FiniteLinearAggregate IndexedVector Vector	\
	   MatrixCategory Matrix_MatrixCategory

axioms := axioms/Stream axioms/RandomGenerator axioms/AxiomEnv	\
	  axioms/Axiom axioms/AxiomConstructorPackage

tests := tests/Test0

library := $(lang) $(sexprs) $(outputs) $(randoms) $(axioms)		\
	   $(arrays) $(tests) $(datatypes) $(linalg) $(trig)		\
	   $(factoreds) $(poly) $(integers)$(floats) $(fractions)	\
	   $(maths) $(attributes) $(environment) $(basics)		\
	   $(segments) $(orders) $(domains) $(equations)

opts_UPC := -WD+tipBup -WD+tfs -WD+ablog -WD+tipTdn -Mpreview 

reqfiles := $(patsubst %,%.req,$(library))
depfiles := $(patsubst %,%.dep,$(library))
aofiles := $(patsubst %,%.ao,$(library))
fmfiles := $(patsubst %,%.fm,$(library))

all: run-all-tests compile_aofiles

compile_aofiles: $(aofiles) 
compile_fmfiles: $(fmfiles) 

$(depfiles): %.dep: $(srcdir)/%.as

$(patsubst %,%.mk,$(library)): %.mk: $(srcdir)/%.as
	@echo MK $@
	@if [ ! -d $(dir $@) ]; then mkdir -p $(dir $@); fi
	@echo > $@.tmp
	@for i in $$(cat $(srcdir)/$*.as | sed -n -e '/^--DEPS:/s/^--DEPS://p'); \
	 do \
	 	echo "$*.dep: $$i.dep" >> $@.tmp;     \
	 	echo "$*.ao: $$i.ao" >> $@.tmp;       \
	 	echo "gloop-$*: $$i.ao" >> $@.tmp;    \
	 done;  \
	 mv $@.tmp $@

$(reqfiles): %.req: $(srcdir)/%.as 
	@echo REQ $@
	@echo > $@
	@for i in $$(cat $(srcdir)/$*.as | sed -n -e '/^--DEPS:/s/^--DEPS://p'); \
	 do echo "$$i" >> $@; done

-include $(patsubst %,%.mk,$(library))

C_ :=
C_L := -WD+lib -WD+symeFill
C_T := -Mpreview -WD+tipBup

define aldor
$(ALDOR) -fap=$*.ap -I$(srcdir) -Y$(dir $*) \
	 -lAxiomLib=axiom_$(notdir $*) $(C_$(C)) $(opts_$*) -fasy -fao=$@ -O $(srcdir)/$*.as
endef

$(aofiles): %.ao: $(srcdir)/%.as %.dep
	@$(call build-ignoring, %.dep, $?, \
		echo AO $@; \
		rm -f $(dir $@)/libaxiom_$(notdir $*).al; \
		for i in $$(cat $*.dep); \
		do \
			ar r $(dir $*)libaxiom_$(notdir $*).al $$i.ao; \
		done;\
		$(aldor))

$(patsubst %, %.cmd, $(library)): %.cmd:
	@echo $(aldor)

define build-ignoring 
	$(if $(filter-out $(1), $(2)), $(3), echo "Ignoring changes to $(2)")
endef

$(patsubst %, %.fm, $(library)): %.fm: %.ao
	$(ALDOR) -ffm=$@ $*.ao

$(patsubst %, %.c, $(library)): %.c: %.ao
	$(ALDOR) -fc=$@ $*.ao

$(patsubst %, %.lsp, $(library)): %.lsp: %.ao
	$(ALDOR) -flsp=$@ $*.ao

$(patsubst %, %.dep,$(library) ): build-dep
$(patsubst %, %.dep,$(library) ): %.dep: %.req
	@echo DEP $@
	@./build-dep $@.tmp $*.req
	@mv $@.tmp $@

$(patsubst %, %.dep-old,$(library) ): %.dep-old: %.req
	@echo DEP $@
	@echo > $@.tmp
	@for i in $$(cat $*.req); \
	 do d=$$(basename $$i .dep); \
	   for j in $$(cat $$i.dep); do grep -q "^$$j$$" $@.tmp || echo $$j >> $@.tmp; done; \
	 echo $(basename $$d .dep)>> $@.tmp;  \
	 done;\
	 mv $@.tmp $@

$(patsubst %, show-%, $(library)): show
$(patsubst %, show-%, $(library)): show-%: %.ao
	aldor="$(ALDOR)" srcdir=$(srcdir) ./show $*

$(patsubst %, gloop-%, $(library)): gloop
$(patsubst %, gloop-%, $(library)): gloop-%: 
	aldor="$(ALDOR)" srcdir=$(srcdir) ./gloop $*

blacklist := tests/Test0
axiom-library: $(foreach elt,$(filter-out $(blacklist), $(library)), $(elt).lsp)

load.input.req: Makefile
	for i in $(library); do echo $$i; done > $@

load.input.dep: load.input.req $(patsubst %,%.dep,$(library))
	./build-dep $@.tmp load.input.req
	mv $@.tmp $@

load.input: load.input.dep
	for i in $$(cat load.input.dep); do echo ")r $i" > $@; done

mostlyclean-local:
	rm -f *.al *.ao *.mk

clean-local: mostlyclean-local

allscripts := $(scripts) $(testscripts)

$(allscripts): %: $(srcdir)/%.sh
	cp $(srcdir)/$*.sh $@
	chmod a+x $@

run-all-tests: $(patsubst %,%.tested,$(testscripts))

all-build-tests: test-build-dep.tested

test-build-dep.tested: test-build-dep build-dep
	./test-build-dep
	touch $@

